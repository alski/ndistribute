//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18213
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace nDistribute.WCF.NetworkServiceClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NetworkServiceClient.INodeContract")]
    public interface INodeContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeContract/Connect", ReplyAction="http://tempuri.org/INodeContract/ConnectResponse")]
        nDistribute.NodeAddress Connect(nDistribute.NodeAddress newNode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INodeContract/Connect", ReplyAction="http://tempuri.org/INodeContract/ConnectResponse")]
        System.Threading.Tasks.Task<nDistribute.NodeAddress> ConnectAsync(nDistribute.NodeAddress newNode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INodeContract/AdviseConnect")]
        void AdviseConnect(nDistribute.NodeAddress newParent);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INodeContract/AdviseConnect")]
        System.Threading.Tasks.Task AdviseConnectAsync(nDistribute.NodeAddress newParent);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INodeContract/ChildDisconnect")]
        void ChildDisconnect(nDistribute.NodeAddress address);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INodeContract/ChildDisconnect")]
        System.Threading.Tasks.Task ChildDisconnectAsync(nDistribute.NodeAddress address);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INodeContract/Send")]
        void Send(string type, byte[] data, nDistribute.NodeAddress from);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INodeContract/Send")]
        System.Threading.Tasks.Task SendAsync(string type, byte[] data, nDistribute.NodeAddress from);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INodeContractChannel : nDistribute.WCF.NetworkServiceClient.INodeContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NodeContractClient : System.ServiceModel.ClientBase<nDistribute.WCF.NetworkServiceClient.INodeContract>, nDistribute.WCF.NetworkServiceClient.INodeContract {
        
        public NodeContractClient() {
        }
        
        public NodeContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NodeContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NodeContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NodeContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public nDistribute.NodeAddress Connect(nDistribute.NodeAddress newNode) {
            return base.Channel.Connect(newNode);
        }
        
        public System.Threading.Tasks.Task<nDistribute.NodeAddress> ConnectAsync(nDistribute.NodeAddress newNode) {
            return base.Channel.ConnectAsync(newNode);
        }
        
        public void AdviseConnect(nDistribute.NodeAddress newParent) {
            base.Channel.AdviseConnect(newParent);
        }
        
        public System.Threading.Tasks.Task AdviseConnectAsync(nDistribute.NodeAddress newParent) {
            return base.Channel.AdviseConnectAsync(newParent);
        }
        
        public void ChildDisconnect(nDistribute.NodeAddress address) {
            base.Channel.ChildDisconnect(address);
        }
        
        public System.Threading.Tasks.Task ChildDisconnectAsync(nDistribute.NodeAddress address) {
            return base.Channel.ChildDisconnectAsync(address);
        }
        
        public void Send(string type, byte[] data, nDistribute.NodeAddress from) {
            base.Channel.Send(type, data, from);
        }
        
        public System.Threading.Tasks.Task SendAsync(string type, byte[] data, nDistribute.NodeAddress from) {
            return base.Channel.SendAsync(type, data, from);
        }
    }
}
